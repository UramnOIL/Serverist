package com.uramnoil.serverist.serverist.domain.models.user

import com.uramnoil.serverist.serverist.domain.models.server.Name
import io.kotest.assertions.throwables.shouldNotThrow
import io.kotest.assertions.throwables.shouldThrow
import io.kotest.core.spec.style.FunSpec

class NameTest : FunSpec({
    context("Ê≠£Â∏∏Á≥ª") {
        test("1ÊñáÂ≠ó") {
            shouldNotThrow<IllegalArgumentException> {
                val string = (1..1).map { 'v' }.joinToString("")
                Name(string)
            }
        }
        test("15ÊñáÂ≠ó") {
            shouldNotThrow<IllegalArgumentException> {
                val string = (1..15).map { 'v' }.joinToString("")
                Name(string)
            }
        }
        test("ÁµµÊñáÂ≠ó") {
            shouldNotThrow<IllegalArgumentException> {
                val string = "üòÅ"
                Name(string)
            }
        }
    }

    context("Áï∞Â∏∏Á≥ª") {
        test("Á©∫ÊñáÂ≠ó") {
            shouldThrow<IllegalArgumentException> {
                Name("")
            }
        }

        test("Á©∫ÁôΩÊñáÂ≠ó") {
            shouldThrow<IllegalArgumentException> {
                Name(" ") // ÂçäËßí
            }

            shouldThrow<IllegalArgumentException> {
                Name("„ÄÄ") // ÂÖ®Ëßí
            }

            shouldThrow<IllegalArgumentException> {
                Name("   ") // TAB
            }
        }

        test("ÂâçÂæåÁ©∫ÁôΩ") {
            shouldThrow<IllegalArgumentException> {
                Name(" hoge")
            }

            shouldThrow<IllegalArgumentException> {
                Name("hoge ")
            }

            shouldThrow<IllegalArgumentException> {
                Name(" hoge ")
            }
        }

        test("32ÊñáÂ≠ó") {
            val string = (1..32).map { 'v' }.joinToString("")
            shouldThrow<IllegalArgumentException> {
                Name(string)
            }
        }
    }
})
